package gui.menu;

import gui.components.DefaultButton;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerListModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import player.Team;
import util.ChangeManager;

public class TeamWahl extends JPanel {

	class PlayerFacChangeManager implements ChangeManager{
		@Override
		public void change() {
			if(!playerFac.abgebrochen){
				myTeam[activeTeam] = (Team)playerFac.getPlayer();
				teamLabel[activeTeam].setText(myTeam[activeTeam].name);
				teamLabel[activeTeam].setForeground(myTeam[activeTeam].farbe);
				startMatch.updatePlayers(myTeam);
			}
			removeAll();
			add(hauptbereichPanel);
			revalidate();
			repaint();
			// playerFac=null;	--> ist das nötig? evtl. für Garbage-Collector
		}
	}
	/**
	 * serialVersionUID generated by Eclipse
	 */
	private static final long serialVersionUID = -9167137045894763352L;
	private StartMatch startMatch;
	private Team[] myTeam;
	private JPanel hauptbereichPanel;
	private JSpinner[] teamSpinner = new JSpinner[2];
	private JPanel[] teamPanel = new JPanel[2];
	private JPanel teamsPanel;
	private JButton fertigButton;
	private JTextField[][] memberTextField = new JTextField[2][8];
	private JLabel[] teamLabel = new JLabel[2];
	private JButton shuffleButton;
	private JPanel buttonPanel;
	private PlayerFactory playerFac;
	private int activeTeam=0;
	private Font standardFont = new java.awt.Font("Comic Sans MS",0,22);
	private Font schriftFont = new java.awt.Font("Comic Sans MS",0,18);
	private int[] numOfMembers = new int[2];
	private GridLayout[] teamPanelLayout = new GridLayout[2];

	{
		numOfMembers[0]=2;
		numOfMembers[1]=2;
	}

	public TeamWahl(StartMatch startMatch) {
		this.startMatch = startMatch;
		initTeams();
		
		initTextFields();
		initGUI();
	}

	private void initTeams() {
		myTeam = new Team[2];
		if(startMatch.myPlayer[0] != null){
			myTeam[0] = (Team)startMatch.myPlayer[0];
		}
		else{
			myTeam[0] = Team.getStandardTeam(0);
		}
		if(startMatch.myPlayer[1] != null){
			myTeam[1] = (Team)startMatch.myPlayer[1];
		}
		else{
			myTeam[1] = Team.getStandardTeam(1);
		}
	}

	private void fertigButtonActionPerformed(ActionEvent evt){
		for(int i=0; i<2; i++){
			List<String> names = new ArrayList<String>();
			for(int j=0; j<numOfMembers[i]; j++){
				String name = memberTextField[i][j].getText();
				if(name.equals("")){
					name = "Player " + Math.random();
				}
				names.add(name);
			}
			myTeam[i].setMemberList(names);	
			startMatch.myPlayer[i] = myTeam[i];
		}
		startMatch.updatePlayers(myTeam);
		startMatch.changeOptions(null);
	}

	private void initGUI() {
		try {
			this.setOpaque(false);
			{
				hauptbereichPanel = new JPanel();
				this.add(hauptbereichPanel);
				hauptbereichPanel.setOpaque(false);
				hauptbereichPanel.setLayout(new BorderLayout());
				{
					teamsPanel = new JPanel();
					GridLayout teamsPanelLayout = new GridLayout(1, 2);
					teamsPanelLayout.setHgap(5);
					teamsPanelLayout.setVgap(5);
					teamsPanelLayout.setColumns(2);
					hauptbereichPanel.add(teamsPanel, BorderLayout.CENTER);
					teamsPanel.setLayout(teamsPanelLayout);
					{
						teamPanel[0] = new JPanel();
						teamPanelLayout[0] = new GridLayout(numOfMembers[0]+2, 1);
						teamPanelLayout[0].setHgap(5);
						teamPanelLayout[0].setVgap(5);
						teamPanelLayout[0].setColumns(1);
						teamPanelLayout[0].setRows(numOfMembers[0]+2);
						teamPanel[0].setLayout(teamPanelLayout[0]);
						teamsPanel.add(teamPanel[0]);
						{
							teamLabel[0] = new JLabel();
							teamLabel[0].setFont(standardFont);
							teamPanel[0].add(teamLabel[0]);
							teamLabel[0].setText(myTeam[0].name);
							teamLabel[0].setForeground(myTeam[0].farbe);
							teamLabel[0].addMouseListener(new MouseAdapter() {
								@Override
								public void mousePressed(MouseEvent evt) {
									teamLabelClicked(0);
								}
							});
						}
						{
							SpinnerListModel team1SpinnerModel =
								new SpinnerListModel(
										new String[] { "2", "3" , "4" , "5" , "6" , "7" , "8" });
							teamSpinner[0] = new JSpinner();
							teamPanel[0].add(teamSpinner[0]);
							teamSpinner[0].setModel(team1SpinnerModel);
							team1SpinnerModel.setValue(myTeam[0].numOfMembers+"");
							numOfMembers[0] = myTeam[0].numOfMembers;
							teamPanelLayout[0].setRows(numOfMembers[0]+2);
							team1SpinnerModel.addChangeListener(new ChangeListener() {
								@Override
								public void stateChanged(ChangeEvent e) {
									numOfMembersStateChanged(0);
								}
							});
						}
						{
							for(int i=0; i<numOfMembers[0]; i++){
								teamPanel[0].add(memberTextField[0][i]);
							}
						}
					}
					{
						teamPanel[1] = new JPanel();
						teamPanelLayout[1] = new GridLayout(numOfMembers[1]+2, 1);
						teamPanelLayout[1].setHgap(5);
						teamPanelLayout[1].setVgap(5);
						teamPanelLayout[1].setColumns(1);
						teamPanelLayout[1].setRows(numOfMembers[1]+2);
						teamPanel[1].setLayout(teamPanelLayout[1]);
						teamsPanel.add(teamPanel[1]);
						{
							teamLabel[1] = new JLabel();
							teamLabel[1].setFont(standardFont);
							teamPanel[1].add(teamLabel[1]);
							teamLabel[1].setText(myTeam[1].name);
							teamLabel[1].setForeground(myTeam[1].farbe);
							teamLabel[1].addMouseListener(new MouseAdapter() {
								@Override
								public void mousePressed(MouseEvent evt) {
									teamLabelClicked(1);
								}
							});
						}
						{
							SpinnerListModel team2SpinnerModel =
								new SpinnerListModel(
										new String[] { "2", "3" , "4" , "5" , "6" , "7" , "8" });
							teamSpinner[1] = new JSpinner();
							teamPanel[1].add(teamSpinner[1]);
							teamSpinner[1].setModel(team2SpinnerModel);
							teamSpinner[1].setValue(myTeam[1].numOfMembers+"");
							numOfMembers[1] = myTeam[1].numOfMembers;
							teamPanelLayout[1].setRows(numOfMembers[1]+2);							
							team2SpinnerModel.addChangeListener(new ChangeListener() {
								@Override
								public void stateChanged(ChangeEvent e) {
									numOfMembersStateChanged(1);
								}
							});
						}
						{
							for(int i=0; i<numOfMembers[1]; i++){
								teamPanel[1].add(memberTextField[1][i]);
							}
						}
					}
				}
				{
					buttonPanel = new JPanel();
					hauptbereichPanel.add(buttonPanel, BorderLayout.SOUTH);
					{
						shuffleButton = new DefaultButton();
						buttonPanel.add(shuffleButton);
						shuffleButton.setText("Shuffle");
						shuffleButton.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent evt) {
								shuffleButtonActionPerformed(evt);
							}
						});
					}
					{
						fertigButton = new DefaultButton();
						buttonPanel.add(fertigButton);
						fertigButton.setText("Fertig");
						fertigButton.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent evt) {
								fertigButtonActionPerformed(evt);
							}
						});
					}
				}
			}
			addMemberNames();
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}

	private void addMemberNames() {
		for(int j=0; j<2; j++){
			int i=0;
			for(String n: myTeam[j].members){
				memberTextField[j][i++].setText(n);
			}
		}
	}

	private void initTextFields(){
		for(int i=0; i<2; i++){
			for(int j=0; j<8; j++){
				memberTextField[i][j] = new JTextField();
				memberTextField[i][j].setToolTipText("Name von Spieler " + (j+1));
				memberTextField[i][j].setFont(schriftFont);
			}
		}
	}

	protected void numOfMembersStateChanged(int whichTeam) {
		numOfMembers[whichTeam] = Integer.parseInt((String)teamSpinner[whichTeam].getModel().getValue());
		teamPanel[whichTeam].removeAll();
		teamPanelLayout[whichTeam].setRows(numOfMembers[whichTeam]+2);
		teamPanel[whichTeam].add(teamLabel[whichTeam]);
		teamPanel[whichTeam].add(teamSpinner[whichTeam]);
		for(int i=0; i<numOfMembers[whichTeam]; i++){
			teamPanel[whichTeam].add(memberTextField[whichTeam][i]);
		}
		validate();
		repaint();
	}

	private void shuffleButtonActionPerformed(ActionEvent evt) {
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Integer> reihenfolge = new ArrayList<Integer>();
		for(int i=0; i<numOfMembers[0]; i++){
			names.add(memberTextField[0][i].getText());
		}
		for(int i=0; i<numOfMembers[1]; i++){
			names.add(memberTextField[1][i].getText());
		}
		HashSet<Integer> schonDran = new HashSet<Integer>();
		Random r = new Random();
		for(int i=0; i<names.size(); i++){
			int next = r.nextInt(names.size());
			while(!schonDran.add(next)){
				next = r.nextInt(names.size());
			}
			reihenfolge.add(next);
		}
		for(int i=0; i<numOfMembers[0]; i++){
			memberTextField[0][i].setText(names.get(reihenfolge.get(i)));
		}
		for(int i=0; i<numOfMembers[1]; i++){
			memberTextField[1][i].setText(names.get(reihenfolge.get(i+numOfMembers[0])));
		}
	}

	private void teamLabelClicked(int teamID){
		activeTeam = teamID;
		playerFac = new PlayerFactory(myTeam[teamID]);
		playerFac.setTeamMode(true);
		playerFac.setCM(new PlayerFacChangeManager());
		removeAll();
		add(playerFac);
		revalidate();
		repaint();
	}
}
