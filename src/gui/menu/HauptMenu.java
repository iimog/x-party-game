package gui.menu;

import gui.Anzeige;
import gui.components.Bildschirm;
import highscore.HighscoreAnzeige;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;

import settings.MainSettingsDialog;
import start.X;


/**
 * This code was edited or generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a corporation,
 * company or business for any purpose whatever) then you
 * should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details.
 * Use of Jigloo implies acceptance of these licensing terms.
 * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
 * THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
 * LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
 */
public class HauptMenu extends Anzeige {
	/**
	 * serialVersionUID generated by Eclipse
	 */
	private static final long serialVersionUID = 7838721137038997445L;
	private static String myBackground = "media/ablauf/iceBG.jpg";
	private JPanel neuesSpielPanel;
	private JButton neuesSpielButton;
	private JPanel spielLadenPanel;
	private JButton spielLadenButton;
	private Bildschirm logoBildschirm;
	private JPanel logoPanel;
	private JPanel einstellungenPanel;
	private JButton einstellungenButton;
	private JPanel highscorePanel;
	private JButton highscoreButton;
	private JPanel beendenPanel;
	private JButton beendenButton;

	public HauptMenu(){
		GridLayout myLayout = new GridLayout(6, 1);
		myLayout.setHgap(5);
		myLayout.setVgap(5);
		myLayout.setColumns(1);
		myLayout.setRows(6);
		this.setLayout(myLayout);
		this.setOpaque(false);
		{
			logoPanel = new JPanel();
			this.add(logoPanel);
			logoPanel.setOpaque(false);
			{
				logoBildschirm = new Bildschirm("media/ablauf/xnewk.png");
				logoPanel.add(logoBildschirm);
			}
		}
		{
			neuesSpielPanel = new JPanel();
			add(neuesSpielPanel);
			neuesSpielPanel.setOpaque(false);
			{
				neuesSpielButton = new JButton();
				neuesSpielPanel.add(neuesSpielButton);
				neuesSpielButton.setText("Neues Spiel");
				neuesSpielButton.setFont(X.buttonFont);
				neuesSpielButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent evt) {
						neuesSpielButtonActionPerformed(evt);
					}
				});
			}
		}
		{
			spielLadenPanel = new JPanel();
			add(spielLadenPanel);
			spielLadenPanel.setOpaque(false);
			{
				spielLadenButton = new JButton();
				spielLadenPanel.add(spielLadenButton);
				spielLadenButton.setText("Spiel laden");
				spielLadenButton.setFont(X.buttonFont);
				spielLadenButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent evt) {
						spielLadenButtonActionPerformed(evt);
					}
				});
			}
		}
		{
			einstellungenPanel = new JPanel();
			add(einstellungenPanel);
			einstellungenPanel.setOpaque(false);
			{
				einstellungenButton = new JButton();
				einstellungenPanel.add(einstellungenButton);
				einstellungenButton.setText("Einstellungen");
				einstellungenButton.setFont(X.buttonFont);
				einstellungenButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent evt) {
						einstellungenButtonActionPerformed(evt);
					}
				});
			}
		}
		{
			highscorePanel = new JPanel();
			add(highscorePanel);
			highscorePanel.setOpaque(false);
			{
				highscoreButton = new JButton();
				highscorePanel.add(highscoreButton);
				highscoreButton.setText("Highscore");
				highscoreButton.setFont(X.buttonFont);
				highscoreButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent evt) {
						highscoreButtonActionPerformed(evt);
					}
				});
			}
		}
		{
			beendenPanel = new JPanel();
			add(beendenPanel);
			beendenPanel.setOpaque(false);
			{
				beendenButton = new JButton();
				beendenPanel.add(beendenButton);
				beendenButton.setText("Beenden");
				beendenButton.setFont(X.buttonFont);
				beendenButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent evt) {
						beendenButtonActionPerformed(evt);
					}
				});
			}
		}
	}

	protected void beendenButtonActionPerformed(ActionEvent evt) {
		instance.close();
	}
	protected void einstellungenButtonActionPerformed(ActionEvent evt) {
		instance.showDialog(new MainSettingsDialog());
	}

	protected void highscoreButtonActionPerformed(ActionEvent evt) {
		//GameHighscorePanel ghp = new GameHighscorePanel(HighscoreFileHandler.loadGameHighscore(new File(X.getDataDir() + "Highscore/Games/guess.ghs")));
		//EasyDialog.showMessage("",ghp);
		instance.changeAnzeige(new HighscoreAnzeige());
	}

	protected void neuesSpielButtonActionPerformed(ActionEvent evt) {
		instance.changeAnzeige(new ModusMenuPanel());
	}

	@Override
	public void nowVisible(){
		instance.changeBackground(myBackground);
	}

	protected void spielLadenButtonActionPerformed(ActionEvent evt) {
		instance.changeAnzeige(new MatchLaden());
	}
}
