package games.dialogeGUIs;
import games.Game;
import gui.AnzeigeDialog;
import gui.components.DefaultButton;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingConstants;

import settings.SettingsFileHandler;
import start.X;

public class GameSettingsDialog extends AnzeigeDialog {
	public static final String NUM_OF_ROUNDS = "Rundenzahl";
	/**
	 * serialVersionUID generated by Eclipse
	 */
	private static final long serialVersionUID = -1171647157012743374L;
	private JPanel buttonPanel;
	private JButton speichernButton;
	private JButton verwerfenButton;
	public JPanel settingsPanel;
	public Game myGame;
	protected Properties settings;
	private JPanel controlPanel;
	private JCheckBox defaultSettingsCheckbox;
	private GridLayout settingsPanelLayout;
	private JLabel rundenzahlLabel;
	private JSlider rundenzahlSlider;
	private int maxRunden = 10;
	protected int numOfRounds = 5;
	private boolean inGame;
	
	public int getMaxRunden() {
		return maxRunden;
	}

	public void setMaxRunden(int maxRunden) {
		this.maxRunden = maxRunden;
		rundenzahlSlider.setMaximum(maxRunden);
	}

	public GameSettingsDialog(Game g){
		this(g, false);
	}
	
	public GameSettingsDialog(Game g, boolean inGame){
		this.setInGame(inGame);
		myGame = g;
		settings = g.getCustomSettings();
		initGUI();
		propertiesToSettings();
	}

	private void initGUI() {
		try {
			BorderLayout thisLayout = new BorderLayout();
			dialogPane.setLayout(thisLayout);
			{
				settingsPanelLayout = new GridLayout(1, 2);
				settingsPanel = new JPanel(settingsPanelLayout);
				settingsPanel.setOpaque(false);
				dialogPane.add(settingsPanel, BorderLayout.CENTER);
			}
			{
				rundenzahlLabel = new JLabel("Siegpunktzahl");
				rundenzahlLabel.setFont(X.BUTTON_FONT);
				rundenzahlLabel.setForeground(Color.WHITE);
				settingsPanel.add(rundenzahlLabel);
			}
			{
				rundenzahlSlider = new JSlider(SwingConstants.HORIZONTAL,1,maxRunden,numOfRounds);
				rundenzahlSlider.setOpaque(false);
				rundenzahlSlider.setForeground(Color.white);
				rundenzahlSlider.setFont(X.BUTTON_FONT);
				rundenzahlSlider.setMajorTickSpacing(1);
				rundenzahlSlider.setMinorTickSpacing(1);
				rundenzahlSlider.setSnapToTicks(true);
				rundenzahlSlider.setPaintTicks(true);
				rundenzahlSlider.setPaintLabels(true);
				if(isInGame()){
					rundenzahlSlider.setEnabled(false);
				}
				settingsPanel.add(rundenzahlSlider);
			}
			{
				controlPanel = new JPanel(new GridLayout(2,1));
				controlPanel.setOpaque(false);
				defaultSettingsCheckbox = new JCheckBox("Als Standard speichern");
				defaultSettingsCheckbox.setFont(X.BUTTON_FONT.deriveFont(15f));
				defaultSettingsCheckbox.setForeground(Color.WHITE);
				defaultSettingsCheckbox.setOpaque(false);
				controlPanel.add(defaultSettingsCheckbox);
				dialogPane.add(controlPanel, BorderLayout.SOUTH);
			}
			{
				buttonPanel = new JPanel();
				buttonPanel.setOpaque(false);
				FlowLayout buttonPanelLayout = new FlowLayout();
				controlPanel.add(buttonPanel, BorderLayout.SOUTH);
				buttonPanel.setLayout(buttonPanelLayout);
				{
					speichernButton = new DefaultButton();
					buttonPanel.add(speichernButton);
					speichernButton.setText("Speichern");
					speichernButton.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							speichern();
						}
					});
				}
				{
					verwerfenButton = new DefaultButton();
					buttonPanel.add(verwerfenButton);
					verwerfenButton.setText("Verwerfen");
					verwerfenButton.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							verwerfenButtonActionPerformed(evt);
						}
					});
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void speichern() {
		settingsToProperties();
		if(defaultSettingsCheckbox.isSelected()){
			SettingsFileHandler.saveSettings(myGame.gameName, settings);
		}
		myGame.setCustomSettings(settings);
		myGame.settingsChanged();
		instance.closeDialog();
	}

	private void verwerfenButtonActionPerformed(ActionEvent evt) {
		instance.closeDialog();
	}
	
	public void propertiesToSettings(){
		if(settings == null){
			return;
		}
		rundenzahlSlider.setValue(Integer.parseInt(settings.getProperty(NUM_OF_ROUNDS, ""+myGame.numOfRounds)));
	}
	
	public void settingsToProperties(){
		if(settings == null){
			settings = new Properties();
		}
		settings.setProperty(NUM_OF_ROUNDS, rundenzahlSlider.getValue()+"");
	}
	
	public void addSettingsComponent(String beschreibung, JComponent komponente, boolean adjustStyle){
		if(adjustStyle){
			adjustStyle(komponente);
		}
		settingsPanelLayout.setRows(settingsPanelLayout.getRows() + 1);
		JLabel beschriftungLabel = new JLabel(beschreibung);
		beschriftungLabel.setFont(X.BUTTON_FONT);
		beschriftungLabel.setForeground(Color.WHITE);
		settingsPanel.add(beschriftungLabel);
		settingsPanel.add(komponente);
		revalidate();
		repaint();
	}
	
	public void addSettingsComponent(String beschreibung, JComponent komponente){
		addSettingsComponent(beschreibung, komponente, true);
	}

	public boolean isInGame() {
		return inGame;
	}

	public void setInGame(boolean inGame) {
		this.inGame = inGame;
	}

	public void adjustStyle(JComponent c) {
		c.setOpaque(false);
		c.setForeground(Color.WHITE);
		c.setFont(X.BUTTON_FONT);
	}

}
